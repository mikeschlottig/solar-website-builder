// This file is auto-generated by @hey-api/openapi-ts

import { type Options, formDataBodySerializer } from '@hey-api/client-fetch';
import type { WebsiteServiceCreateWebsiteData, WebsiteServiceCreateWebsiteResponse, WebsiteServiceCreateWebsiteError, WebsiteServiceGetUserWebsitesData, WebsiteServiceGetUserWebsitesResponse, WebsiteServiceGetWebsiteData, WebsiteServiceGetWebsiteResponse, WebsiteServiceGetWebsiteError, WebsiteServiceUpdateWebsiteData, WebsiteServiceUpdateWebsiteResponse, WebsiteServiceUpdateWebsiteError, WebsiteServiceUploadFaviconData, WebsiteServiceUploadFaviconResponse, WebsiteServiceUploadFaviconError, WebsiteServiceDeleteWebsiteData, WebsiteServiceDeleteWebsiteResponse, WebsiteServiceDeleteWebsiteError, WebsiteServicePublishWebsiteData, WebsiteServicePublishWebsiteResponse, WebsiteServicePublishWebsiteError, ComponentServiceCreateCustomComponentData, ComponentServiceCreateCustomComponentResponse, ComponentServiceCreateCustomComponentError, ComponentServiceGetUserComponentsData, ComponentServiceGetUserComponentsResponse, ComponentServiceGetUserComponentsError, ComponentServiceGetBuiltInComponentsData, ComponentServiceGetBuiltInComponentsResponse, ComponentServiceGetPublicComponentsData, ComponentServiceGetPublicComponentsResponse, ComponentServiceGetPublicComponentsError, ComponentServiceGetComponentData, ComponentServiceGetComponentResponse, ComponentServiceGetComponentError, ComponentServiceUpdateComponentData, ComponentServiceUpdateComponentResponse, ComponentServiceUpdateComponentError, ComponentServiceUploadComponentPreviewData, ComponentServiceUploadComponentPreviewResponse, ComponentServiceUploadComponentPreviewError, ComponentServiceDeleteComponentData, ComponentServiceDeleteComponentResponse, ComponentServiceDeleteComponentError, ComponentServiceValidateComponentCodeData, ComponentServiceValidateComponentCodeResponse, ComponentServiceValidateComponentCodeError, MediaServiceUploadMediaData, MediaServiceUploadMediaResponse, MediaServiceUploadMediaError, MediaServiceGetUserMediaData, MediaServiceGetUserMediaResponse, MediaServiceGetUserMediaError, MediaServiceGetMediaAssetData, MediaServiceGetMediaAssetResponse, MediaServiceGetMediaAssetError, MediaServiceUpdateMediaMetadataData, MediaServiceUpdateMediaMetadataResponse, MediaServiceUpdateMediaMetadataError, MediaServiceDeleteMediaAssetData, MediaServiceDeleteMediaAssetResponse, MediaServiceDeleteMediaAssetError, MediaServiceOrganizeMediaData, MediaServiceOrganizeMediaResponse, MediaServiceOrganizeMediaError, PageServiceCreatePageData, PageServiceCreatePageResponse, PageServiceCreatePageError, PageServiceGetWebsitePagesData, PageServiceGetWebsitePagesResponse, PageServiceGetWebsitePagesError, PageServiceGetPageData, PageServiceGetPageResponse, PageServiceGetPageError, PageServiceUpdatePageContentData, PageServiceUpdatePageContentResponse, PageServiceUpdatePageContentError, PageServiceUpdatePageMetadataData, PageServiceUpdatePageMetadataResponse, PageServiceUpdatePageMetadataError, PageServiceUpdatePageStylesData, PageServiceUpdatePageStylesResponse, PageServiceUpdatePageStylesError, PageServicePublishPageData, PageServicePublishPageResponse, PageServicePublishPageError, PageServiceDeletePageData, PageServiceDeletePageResponse, PageServiceDeletePageError, PageServiceReorderPagesData, PageServiceReorderPagesResponse, PageServiceReorderPagesError } from './types.gen';
import { client as _heyApiClient } from './client.gen';

/**
 * Website Service Create Website
 * Create a new website for the authenticated user.
 */
export const websiteServiceCreateWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsiteServiceCreateWebsiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServiceCreateWebsiteResponse, WebsiteServiceCreateWebsiteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/create_website',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Website Service Get User Websites
 * Get all websites belonging to the authenticated user.
 */
export const websiteServiceGetUserWebsites = <ThrowOnError extends boolean = false>(options?: Options<WebsiteServiceGetUserWebsitesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServiceGetUserWebsitesResponse, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/get_user_websites',
        ...options
    });
};

/**
 * Website Service Get Website
 * Get a specific website belonging to the authenticated user.
 */
export const websiteServiceGetWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsiteServiceGetWebsiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServiceGetWebsiteResponse, WebsiteServiceGetWebsiteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/get_website',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Website Service Update Website
 * Update website settings.
 */
export const websiteServiceUpdateWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsiteServiceUpdateWebsiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServiceUpdateWebsiteResponse, WebsiteServiceUpdateWebsiteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/update_website',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Website Service Upload Favicon
 * Upload and set favicon for a website.
 */
export const websiteServiceUploadFavicon = <ThrowOnError extends boolean = false>(options: Options<WebsiteServiceUploadFaviconData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServiceUploadFaviconResponse, WebsiteServiceUploadFaviconError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/upload_favicon',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Website Service Delete Website
 * Delete a website and all its associated data.
 */
export const websiteServiceDeleteWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsiteServiceDeleteWebsiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServiceDeleteWebsiteResponse, WebsiteServiceDeleteWebsiteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/delete_website',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Website Service Publish Website
 * Publish a website (make it live).
 */
export const websiteServicePublishWebsite = <ThrowOnError extends boolean = false>(options: Options<WebsiteServicePublishWebsiteData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<WebsiteServicePublishWebsiteResponse, WebsiteServicePublishWebsiteError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/website_service/publish_website',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Create Custom Component
 * Create a new custom React component.
 */
export const componentServiceCreateCustomComponent = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceCreateCustomComponentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceCreateCustomComponentResponse, ComponentServiceCreateCustomComponentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/create_custom_component',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Get User Components
 * Get all components created by the user, optionally filtered by category.
 */
export const componentServiceGetUserComponents = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceGetUserComponentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceGetUserComponentsResponse, ComponentServiceGetUserComponentsError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/get_user_components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Get Built In Components
 * Get all built-in components available to all users.
 */
export const componentServiceGetBuiltInComponents = <ThrowOnError extends boolean = false>(options?: Options<ComponentServiceGetBuiltInComponentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceGetBuiltInComponentsResponse, unknown, ThrowOnError>({
        url: '/api/component_service/get_built_in_components',
        ...options
    });
};

/**
 * Component Service Get Public Components
 * Get all public custom components, optionally filtered by category.
 */
export const componentServiceGetPublicComponents = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceGetPublicComponentsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceGetPublicComponentsResponse, ComponentServiceGetPublicComponentsError, ThrowOnError>({
        url: '/api/component_service/get_public_components',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Get Component
 * Get a specific component with ownership verification.
 */
export const componentServiceGetComponent = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceGetComponentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceGetComponentResponse, ComponentServiceGetComponentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/get_component',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Update Component
 * Update a custom component.
 */
export const componentServiceUpdateComponent = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceUpdateComponentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceUpdateComponentResponse, ComponentServiceUpdateComponentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/update_component',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Upload Component Preview
 * Upload a preview image for a component.
 */
export const componentServiceUploadComponentPreview = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceUploadComponentPreviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceUploadComponentPreviewResponse, ComponentServiceUploadComponentPreviewError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/upload_component_preview',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Component Service Delete Component
 * Delete a custom component.
 */
export const componentServiceDeleteComponent = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceDeleteComponentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceDeleteComponentResponse, ComponentServiceDeleteComponentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/delete_component',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Component Service Validate Component Code
 * Validate React component code and return any errors or warnings.
 */
export const componentServiceValidateComponentCode = <ThrowOnError extends boolean = false>(options: Options<ComponentServiceValidateComponentCodeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<ComponentServiceValidateComponentCodeResponse, ComponentServiceValidateComponentCodeError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/component_service/validate_component_code',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Media Service Upload Media
 * Upload a media file and create a database record.
 */
export const mediaServiceUploadMedia = <ThrowOnError extends boolean = false>(options: Options<MediaServiceUploadMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MediaServiceUploadMediaResponse, MediaServiceUploadMediaError, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media_service/upload_media',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

/**
 * Media Service Get User Media
 * Get media assets for a user, optionally filtered by website, folder, or type.
 */
export const mediaServiceGetUserMedia = <ThrowOnError extends boolean = false>(options: Options<MediaServiceGetUserMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MediaServiceGetUserMediaResponse, MediaServiceGetUserMediaError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media_service/get_user_media',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Media Service Get Media Asset
 * Get a specific media asset with ownership verification.
 */
export const mediaServiceGetMediaAsset = <ThrowOnError extends boolean = false>(options: Options<MediaServiceGetMediaAssetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MediaServiceGetMediaAssetResponse, MediaServiceGetMediaAssetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media_service/get_media_asset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Media Service Update Media Metadata
 * Update media asset metadata.
 */
export const mediaServiceUpdateMediaMetadata = <ThrowOnError extends boolean = false>(options: Options<MediaServiceUpdateMediaMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MediaServiceUpdateMediaMetadataResponse, MediaServiceUpdateMediaMetadataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media_service/update_media_metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Media Service Delete Media Asset
 * Delete a media asset and its file from storage.
 */
export const mediaServiceDeleteMediaAsset = <ThrowOnError extends boolean = false>(options: Options<MediaServiceDeleteMediaAssetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MediaServiceDeleteMediaAssetResponse, MediaServiceDeleteMediaAssetError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media_service/delete_media_asset',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Media Service Organize Media
 * Move multiple media assets to a different folder.
 */
export const mediaServiceOrganizeMedia = <ThrowOnError extends boolean = false>(options: Options<MediaServiceOrganizeMediaData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<MediaServiceOrganizeMediaResponse, MediaServiceOrganizeMediaError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/media_service/organize_media',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Create Page
 * Create a new page for a website.
 */
export const pageServiceCreatePage = <ThrowOnError extends boolean = false>(options: Options<PageServiceCreatePageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceCreatePageResponse, PageServiceCreatePageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/create_page',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Get Website Pages
 * Get all pages for a website.
 */
export const pageServiceGetWebsitePages = <ThrowOnError extends boolean = false>(options: Options<PageServiceGetWebsitePagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceGetWebsitePagesResponse, PageServiceGetWebsitePagesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/get_website_pages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Get Page
 * Get a specific page with ownership verification.
 */
export const pageServiceGetPage = <ThrowOnError extends boolean = false>(options: Options<PageServiceGetPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceGetPageResponse, PageServiceGetPageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/get_page',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Update Page Content
 * Update the content structure of a page.
 */
export const pageServiceUpdatePageContent = <ThrowOnError extends boolean = false>(options: Options<PageServiceUpdatePageContentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceUpdatePageContentResponse, PageServiceUpdatePageContentError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/update_page_content',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Update Page Metadata
 * Update page metadata.
 */
export const pageServiceUpdatePageMetadata = <ThrowOnError extends boolean = false>(options: Options<PageServiceUpdatePageMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceUpdatePageMetadataResponse, PageServiceUpdatePageMetadataError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/update_page_metadata',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Update Page Styles
 * Update page-specific styles.
 */
export const pageServiceUpdatePageStyles = <ThrowOnError extends boolean = false>(options: Options<PageServiceUpdatePageStylesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceUpdatePageStylesResponse, PageServiceUpdatePageStylesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/update_page_styles',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Publish Page
 * Publish a page.
 */
export const pageServicePublishPage = <ThrowOnError extends boolean = false>(options: Options<PageServicePublishPageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServicePublishPageResponse, PageServicePublishPageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/publish_page',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Delete Page
 * Delete a page.
 */
export const pageServiceDeletePage = <ThrowOnError extends boolean = false>(options: Options<PageServiceDeletePageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceDeletePageResponse, PageServiceDeletePageError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/delete_page',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Page Service Reorder Pages
 * Reorder pages by updating their sort_order values.
 */
export const pageServiceReorderPages = <ThrowOnError extends boolean = false>(options: Options<PageServiceReorderPagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PageServiceReorderPagesResponse, PageServiceReorderPagesError, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/api/page_service/reorder_pages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};
