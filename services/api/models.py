# Auto-generated by Lumenary
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal, Annotated, Tuple, Set, Any

from datetime import datetime, date, time, timedelta
from uuid import UUID
import uuid

class TokenExchangeRequest(BaseModel):
    client_id: str
    grant_type: str
    code: Optional[str] = None
    code_verifier: Optional[str] = None

class TokenResponse(BaseModel):
    access_token: str
    token_type: str = "bearer"
    expires_in: int = 3600

class TokenValidationRequest(BaseModel):
    token: str
    
class LogoutResponse(BaseModel):
    success: bool = True

# Import user-defined models that we need for input/response models
from core.media_asset import MediaAsset
from core.page import Page
from core.website import Website
from core.component import Component

class BodyWebsiteServiceCreateWebsite(BaseModel):
  name: str
  description: Optional[str] = None

CreateWebsiteOutputSchema = Website
GetUserWebsitesOutputSchema = List[Website]
class BodyWebsiteServiceGetWebsite(BaseModel):
  website_id: UUID

GetWebsiteOutputSchema = Website
class BodyWebsiteServiceUpdateWebsite(BaseModel):
  website_id: UUID
  name: Optional[str] = None
  description: Optional[str] = None
  domain: Optional[str] = None
  theme_config: Optional[dict] = None
  seo_config: Optional[dict] = None

UpdateWebsiteOutputSchema = Website
UploadFaviconOutputSchema = Website
class BodyWebsiteServiceDeleteWebsite(BaseModel):
  website_id: UUID

DeleteWebsiteOutputSchema = bool
class BodyWebsiteServicePublishWebsite(BaseModel):
  website_id: UUID

PublishWebsiteOutputSchema = Website
class BodyComponentServiceCreateCustomComponent(BaseModel):
  name: str
  code: str
  description: Optional[str] = None
  category: str
  styles: Optional[str] = None
  props_schema: Optional[Dict] = None

CreateCustomComponentOutputSchema = Component
class BodyComponentServiceGetUserComponents(BaseModel):
  category: Optional[str] = None

GetUserComponentsOutputSchema = List[Component]
GetBuiltInComponentsOutputSchema = List[Component]
class BodyComponentServiceGetPublicComponents(BaseModel):
  category: Optional[str] = None

GetPublicComponentsOutputSchema = List[Component]
class BodyComponentServiceGetComponent(BaseModel):
  component_id: UUID

GetComponentOutputSchema = Component
class BodyComponentServiceUpdateComponent(BaseModel):
  component_id: UUID
  name: Optional[str] = None
  description: Optional[str] = None
  code: Optional[str] = None
  styles: Optional[str] = None
  props_schema: Optional[Dict] = None
  is_public: Optional[bool] = None

UpdateComponentOutputSchema = Component
UploadComponentPreviewOutputSchema = Component
class BodyComponentServiceDeleteComponent(BaseModel):
  component_id: UUID

DeleteComponentOutputSchema = bool
class BodyComponentServiceValidateComponentCode(BaseModel):
  code: str

ValidateComponentCodeOutputSchema = Dict
UploadMediaOutputSchema = MediaAsset
class BodyMediaServiceGetUserMedia(BaseModel):
  website_id: Optional[UUID] = None
  folder: Optional[str] = None
  mime_type_filter: Optional[str] = None

GetUserMediaOutputSchema = List[MediaAsset]
class BodyMediaServiceGetMediaAsset(BaseModel):
  asset_id: UUID

GetMediaAssetOutputSchema = MediaAsset
class BodyMediaServiceUpdateMediaMetadata(BaseModel):
  asset_id: UUID
  name: Optional[str] = None
  alt_text: Optional[str] = None
  tags: Optional[List[str]] = None
  folder: Optional[str] = None

UpdateMediaMetadataOutputSchema = MediaAsset
class BodyMediaServiceDeleteMediaAsset(BaseModel):
  asset_id: UUID

DeleteMediaAssetOutputSchema = bool
class BodyMediaServiceOrganizeMedia(BaseModel):
  asset_ids: List[UUID]
  target_folder: Optional[str] = None

OrganizeMediaOutputSchema = List[MediaAsset]
class BodyPageServiceCreatePage(BaseModel):
  website_id: UUID
  title: str
  slug: str
  meta_description: Optional[str] = None

CreatePageOutputSchema = Page
class BodyPageServiceGetWebsitePages(BaseModel):
  website_id: UUID

GetWebsitePagesOutputSchema = List[Page]
class BodyPageServiceGetPage(BaseModel):
  page_id: UUID

GetPageOutputSchema = Page
class BodyPageServiceUpdatePageContent(BaseModel):
  page_id: UUID
  content_structure: Dict

UpdatePageContentOutputSchema = Page
class BodyPageServiceUpdatePageMetadata(BaseModel):
  page_id: UUID
  title: Optional[str] = None
  slug: Optional[str] = None
  meta_description: Optional[str] = None
  meta_keywords: Optional[str] = None

UpdatePageMetadataOutputSchema = Page
class BodyPageServiceUpdatePageStyles(BaseModel):
  page_id: UUID
  styles: Dict

UpdatePageStylesOutputSchema = Page
class BodyPageServicePublishPage(BaseModel):
  page_id: UUID

PublishPageOutputSchema = Page
class BodyPageServiceDeletePage(BaseModel):
  page_id: UUID

DeletePageOutputSchema = bool
class BodyPageServiceReorderPages(BaseModel):
  website_id: UUID
  page_orders: List[Dict]

ReorderPagesOutputSchema = List[Page]
